# ================================
# E-COMMERCE APPLICATION - ENVIRONMENT VARIABLES
# ================================
# Copy this file to .env and fill in your actual values
# NEVER commit the .env file to version control!

# ================================
# BACKEND CONFIGURATION
# ================================

# MongoDB Connection String
# Get this from: https://www.mongodb.com/
# 1. Create a free account at MongoDB Atlas (https://www.mongodb.com/cloud/atlas/register)
# 2. Create a new cluster (free tier available)
# 3. Click "Connect" -> "Connect your application"
# 4. Copy the connection string and replace <password> with your database user password
# Example: mongodb+srv://username:password@cluster0.xxxxx.mongodb.net/ecommerce?retryWrites=true&w=majority
# For local MongoDB installation: mongodb://localhost:27017/ecommerce
MONGO_URI=mongodb://localhost:27017/ecommerce

# JWT Secret Key
# Generate a secure random string for JWT token signing
# Use a password generator or run this command in terminal:
# Node.js: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
# OpenSSL: openssl rand -hex 64
# Must be at least 32 characters long for security
JWT_SECRET=your_super_secret_jwt_key_here_min_32_chars

# ================================
# EMAIL CONFIGURATION (Nodemailer)
# ================================

# Gmail Email Address
# The email address from which confirmation emails will be sent
# Example: youremail@gmail.com
EMAIL=your_email@gmail.com

# Gmail App Password (NOT your regular Gmail password!)
# Get this from: https://myaccount.google.com/apppasswords
# Steps:
# 1. Enable 2-Step Verification on your Google Account
# 2. Go to https://myaccount.google.com/apppasswords
# 3. Select "Mail" as the app and your device
# 4. Click "Generate" and copy the 16-character password
# 5. Paste it here (remove spaces)
# Example: abcd efgh ijkl mnop (remove spaces -> abcdefghijklmnop)
APP_PASSWORD=your_16_char_app_password

# Sender Name
# The name that will appear as the sender in emails
# Example: E-Commerce Team
NAME=E-Commerce System

# ================================
# GOOGLE OAUTH 2.0 CONFIGURATION
# ================================

# Google OAuth Client ID
# Get this from: https://console.cloud.google.com/
# Steps:
# 1. Go to https://console.cloud.google.com/
# 2. Create a new project or select existing one
# 3. Go to "APIs & Services" -> "Credentials"
# 4. Click "Create Credentials" -> "OAuth client ID"
# 5. Choose "Web application"
# 6. Add authorized JavaScript origins: http://localhost:3000
# 7. Add authorized redirect URIs: http://localhost:3000
# 8. Copy the Client ID
# Example: 123456789-abcdefghijklmnop.apps.googleusercontent.com
CLIENT_ID=your_google_oauth_client_id.apps.googleusercontent.com

# ================================
# FRONTEND CONFIGURATION
# ================================

# Backend API URL
# The URL where your backend server is running
# Default for local development: http://localhost:5000
# For production: Replace with your deployed backend URL
REACT_APP_BACKEND_URL=http://localhost:5000

# Frontend URL
# The URL where your React app is running
# Default for local development: http://localhost:3000
# For production: Replace with your deployed frontend URL
REACT_APP_FRONTEND_URL=http://localhost:3000

# ================================
# OPTIONAL CONFIGURATIONS
# ================================

# Port Configuration (if you want to customize)
# PORT=5000
# FRONTEND_PORT=3000

# Node Environment
# NODE_ENV=development

# ================================
# NOTES & SECURITY BEST PRACTICES
# ================================
# 1. NEVER commit your .env file to Git
# 2. Add .env to your .gitignore file
# 3. Use strong, unique values for JWT_SECRET
# 4. Use Gmail App Passwords, not your actual Gmail password
# 5. Keep your MongoDB credentials secure
# 6. Rotate secrets regularly in production
# 7. For production, use environment-specific configurations
# 8. Consider using secret management services (AWS Secrets Manager, Azure Key Vault, etc.)
